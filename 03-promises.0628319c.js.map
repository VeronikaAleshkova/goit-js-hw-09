{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,UAAWF,SAASC,cAAc,0BAiCpC,SAASE,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAE7BC,YAAW,KACLN,EACFI,EAAQ,C,SAACN,E,MAAUC,IAErBM,EAAO,C,SAACP,E,MAAUC,MAChBA,MAxCNP,EAAKC,KAAKc,iBAAiB,UAE3B,SAAkBC,GAChBA,EAAIC,iBACJjB,EAAKI,UAAUc,UAAW,EAE1B,MAAOX,MAAAY,EAAKC,KAAEA,EAAIC,OAAEA,GAAUL,EAAIM,cAAcC,SAChD,IAAIC,EAAYC,OAAON,EAAMO,OACzBC,EAAWF,OAAOL,EAAKM,OACvBE,EAAaH,OAAOJ,EAAOK,OAE3BG,EAAaL,EAAYG,EAAWC,EAExC,GAAGJ,EAAY,GAAKG,EAAW,GAAKC,EAAY,EAE9C,YADA9B,EAAAgC,OAAOC,QAAQ,wCAIjB,IAAK,IAAIC,EAAW,EAAGA,GAAYJ,EAAYI,GAAU,EAEvD3B,EAAc2B,EAAUR,GACvBS,MAAK,EAAC3B,SAACA,EAAQC,MAAEA,KAAWT,EAAAgC,OAAOI,QAAQ,uBAAqB5B,QAAiBC,SAAY4B,OAC3F,EAAK7B,WAASC,WAAaT,EAAAgC,OAAMM,QAAC,sBAAS9B,QAA8BC,SAC5EiB,GAAaG,EAGf3B,EAAKC,KAAKoC,QAkBMC,EAjBPT,EAkBTf,YAAW,KACTd,EAAKI,UAAUc,UAAW,IACzBoB,GAHL,IAAkBA","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  btnSubmit: document.querySelector('button[type=\"submit\"]')\n};\n\nrefs.form.addEventListener('submit', onSubmit);\n\nfunction onSubmit(evt) {\n  evt.preventDefault();\n  refs.btnSubmit.disabled = true;\n\n  const {delay, step, amount} = evt.currentTarget.elements;\n  let userDelay = Number(delay.value);\n  let userStep = Number(step.value);\n  let userAmount = Number(amount.value);\n\n  let totalDelay = userDelay + userStep * userAmount;\n\n  if(userDelay < 0 || userStep < 0 || userAmount <0) {\n    Notify.warning('Entered values must not be negative!');\n    return;\n  }\n\n  for (let position = 1; position <= userAmount; position+=1) {\n   \n    createPromise(position, userDelay)\n    .then(({position, delay}) => Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`))\n    .catch(({position, delay}) => Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`));\n    userDelay += userStep;\n    // userDelay += userStep*position;\n  }\n  refs.form.reset();\n  onOffBtn(totalDelay);\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n \n  setTimeout(() => {\n    if (shouldResolve) {\n      resolve({position, delay})\n  } else {\n    reject({position, delay})\n  }}, delay) \n})\n};\n\nfunction onOffBtn(total) {\n  setTimeout(() => {\n    refs.btnSubmit.disabled = false\n  }, total)\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$refs","form","document","querySelector","btnSubmit","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","evt","preventDefault","disabled","delay1","step","amount","currentTarget","elements","userDelay","Number","value","userStep","userAmount","totalDelay","Notify","warning","position1","then","success","catch","failure","reset","total"],"version":3,"file":"03-promises.0628319c.js.map"}